# list
student: !!seq
 - name
 - registration number
 - date of registration
 - program
 - year of study
 - age
 - marks

# when some of the keys of the sequence are empty -> that type of sequence is known as sparse sequence
sparse sequence: !!seq
 - 
 - name
 - .nan
 - .inf # etc

# it is also possible to have nested sequence like list inside another list and many more
animals:
 # species of animals
 - fish:
   - tilapia

 - amphibians:
   - frog
   - salamanda
 
 - reptiles
   - crocodile
   - lizard

 - mammals:
   - human beings
   - lion
   - hippo


# maps - these are key value pairs: to specify the type we use !!map
groceries: !!map {
 tomatoes: 25,
 onions: 20,
 vegetable oil: 390 # and many more
}

# just like lists it is possible to have nested maps too by placing other maps inside the others
# we can also nest maps inside list and list inside maps and so on

schools: {
 school of computing and informatics: {
  departments: [
   computer science: [computer science, data science, computer technology, computer security and forensics],
   information technology: [infomation technology, business information technology],
   communication and journalism: [information science, journalism]
  ]
 },
 school of engineering and architecture: {
  departments: [
   mechanical engineering: [mechanical engineering],
   electrical and electronics engineering: [electrical engineering, electrical and electronics engineering, megatronic enginerring],
   civil engineering: [civil engineering]
  ]
 }

 # the nesting can continue on untill it is no longer needed
}

# YAML supports complex data types like sequences (lists) and mappings (dictionaries)
# and it is possible to have a sequence of maps or a map of sequences
# or a sequence of sequences and so on

# similar representation can be done using indentation
school:
  school of computing and informatics:
    departments:
      computer science: [computer science, data science, computer technology, computer security and forensics]
      information technology: [information technology, business information technology]
      communication and journalism: [information science, journalism]
  school of engineering and architecture:
    departments:
      mechanical engineering: [mechanical engineering]
      electrical and electronics engineering: [electrical engineering, electrical and electronics engineering, megatronic enginerring]
      civil engineering: [civil engineering]
  # the nesting can continue on untill it is no longer needed


# pairs: keys may have duplicates
pair examle: !!pairs
 - job: student
 - job: teacher
# this will be accessed as an array of hashtables - convert to JSON to view the actual representation and same as below
pair example: !!pairs [job: student, job: teacher]

# to ensure no duplicates we make the pair to be set as below
set example: !!set
 ? name
 ? age
# this won't allow values to this map since set only accept null as the value to the keys


# if you have a key and you wan't the values to be in a sequence we can use dictionary (!!omap) for that case

# dictionary
continents: !!omap
 - africa:
   - northern africa: morocco, tunisia, algeria...
   - western africa: nigeria, chad, guinea...
   - eastern africa: kenya, uganda, tanzania, rwanda...
   - southern africa: south africa, botswana, zimbabwe...
   - central africa: congo...

 - asia:
   - china, india, united arab emmirates, saudi, singapore, korea, japan...
 
 - america:
   - north america: 
   - south america: jamaica, brazil

 - australia and newzeland:
   - australia
   - newzeland

 - europe:
   - france, london, italy, russia, 


# reusing some properties
liking of a person: &likes
 favourite fruit: mango
 worst fruit: grapes

# for example if you have properties or data that you want to apply to several objects copy pasting isn't idiomatic and there is where anchors comes in: to apply anchors we employ &base as be we want to apply the liking to a group of people

person1:
 name: Steven
 age: 25
 <<: *likes # apply the key value pair for the anchor here


person2:
 name: Tony
 age: 19
 <<: *likes # here too
 dislikes: berries # I have overritten the dislikes of person2 and it's nolonger grapes

# and so on



